warning: LF will be replaced by CRLF in src/main/resources/application.properties.
The file will have its original line endings in your working directory
[1mdiff --git a/src/main/java/com/nsu/mymusic/config/SecurityConfig.java b/src/main/java/com/nsu/mymusic/config/SecurityConfig.java[m
[1mindex 9d33023..2aac86d 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/config/SecurityConfig.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/config/SecurityConfig.java[m
[36m@@ -41,10 +41,10 @@[m [mpublic class SecurityConfig {[m
                .csrf(AbstractHttpConfigurer::disable)[m
                .authorizeHttpRequests(auth->auth[m
                        .requestMatchers(HttpMethod.OPTIONS,"/**").permitAll()[m
[31m-                       .requestMatchers("api/get/**","/error","/uploads/**","api/authenticate").permitAll()[m
[31m-                       .requestMatchers("api/user").hasRole("USER")[m
[31m-                       .requestMatchers("/api/artist/**").hasRole("ADMIN")[m
[31m-                       .requestMatchers("/user/**").hasAnyRole("USER", "ADMIN")[m
[32m+[m[32m                       .requestMatchers("/api/get/**","/error","/uploads/**","/api/authenticate").permitAll()[m
[32m+[m[32m                       .requestMatchers("/api/user/**","/api/all/songs").hasRole("USER")[m
[32m+[m[32m                       .requestMatchers("/api/artist/**").hasRole("ARTIST")[m
[32m+[m[32m                       .requestMatchers("/user/**").hasAnyRole("USER", "ARTIST")[m
                        .anyRequest().authenticated())[m
                .sessionManagement(sess->sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))[m
                .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/controller/GenreController.java b/src/main/java/com/nsu/mymusic/controller/GenreController.java[m
[1mindex 41d0403..805446a 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/controller/GenreController.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/controller/GenreController.java[m
[36m@@ -21,7 +21,6 @@[m [mpublic class GenreController {[m
     @GetMapping("/get/all/genre")[m
     public ResponseEntity<?>getAllGenre(){[m
         List<Genre> genres = genreRepository.findAll();[m
[31m-[m
         return ResponseEntity.ok(genres);[m
     }[m
 [m
[1mdiff --git a/src/main/java/com/nsu/mymusic/controller/LikedSongController.java b/src/main/java/com/nsu/mymusic/controller/LikedSongController.java[m
[1mindex 2d699ce..2abb6b6 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/controller/LikedSongController.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/controller/LikedSongController.java[m
[36m@@ -1,7 +1,6 @@[m
 package com.nsu.mymusic.controller;[m
 [m
 import com.nsu.mymusic.entity.Song;[m
[31m-import com.nsu.mymusic.repository.LikedSongRepository;[m
 import com.nsu.mymusic.service.userServices.LikedSongService;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.web.bind.annotation.*;[m
[36m@@ -15,20 +14,21 @@[m [mpublic class LikedSongController {[m
     @Autowired[m
     private LikedSongService likedSongService;[m
 [m
[31m-    @PostMapping("/song/liked")[m
[32m+[m[32m    @PostMapping("/user/liked/song")[m
     public String likeSong(@RequestParam Long userId,@RequestParam Long songId){[m
         likedSongService.likeSong(userId, songId);[m
         return "Song liked";[m
     }[m
 [m
[31m-    @DeleteMapping("/song/unlike")[m
[31m-    public String unlikeSong(Long userId, Long songId){[m
[32m+[m[32m    @DeleteMapping("/user/song/unlike")[m
[32m+[m[32m    public String unlikeSong(@RequestParam Long userId,@RequestParam Long songId){[m
         likedSongService.unlikeSong(userId, songId);[m
         return "Song unliked";[m
     }[m
 [m
[31m-    @GetMapping[m
[31m-    public List<Song>getLikedSongs(Long userId){[m
[32m+[m[32m    @GetMapping("/user/{userId}/liked/songs")[m
[32m+[m[32m    public List<Song>getLikedSongs(@PathVariable Long userId){[m
         return likedSongService.getLikedSongs(userId);[m
     }[m
 }[m
[41m+[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/controller/PlaylistController.java b/src/main/java/com/nsu/mymusic/controller/PlaylistController.java[m
[1mindex b083041..03dc2d7 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/controller/PlaylistController.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/controller/PlaylistController.java[m
[36m@@ -1,4 +1,68 @@[m
[31m-package com.nsu.mymusic.controller;[m
[32m+[m[32m    package com.nsu.mymusic.controller;[m
[32m+[m[41m    [m
[32m+[m[32m    import com.nsu.mymusic.dtos.*;[m
[32m+[m[32m    import com.nsu.mymusic.repository.PlaylistRepository;[m
[32m+[m[32m    import com.nsu.mymusic.service.userServices.PlaylistService;[m
[32m+[m[32m    import org.apache.coyote.BadRequestException;[m
[32m+[m[32m    import org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32m    import org.springframework.http.HttpStatus;[m
[32m+[m[32m    import org.springframework.http.ResponseEntity;[m
[32m+[m[32m    import org.springframework.web.bind.annotation.*;[m
[32m+[m[32m    import org.springframework.web.server.ResponseStatusException;[m
[32m+[m[41m    [m
[32m+[m[32m    import java.util.List;[m
[32m+[m[41m    [m
[32m+[m[32m    @RestController[m
[32m+[m[32m    @RequestMapping("/api")[m
[32m+[m[32m    public class PlaylistController {[m
[32m+[m[41m    [m
[32m+[m[32m        @Autowired[m
[32m+[m[32m        private PlaylistService playlistService;[m
 [m
[31m-public class PlaylistController {[m
[31m-}[m
[32m+[m[32m        @PostMapping("/user/{userId}/create/playlist")[m
[32m+[m[32m        public ResponseEntity<PlaylistDto> createPlaylist([m
[32m+[m[32m                @RequestBody CreatePlaylistRequest request,[m
[32m+[m[32m                @PathVariable Long userId[m
[32m+[m[32m        ){[m
[32m+[m[32m            PlaylistDto playlist = playlistService.createPlaylist(request, userId);[m
[32m+[m[32m            return ResponseEntity.ok(playlist);[m
[32m+[m[32m        }[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m        @GetMapping("/user/{userId}/playlist")[m
[32m+[m[32m        public ResponseEntity<?>getAllPlaylists([m
[32m+[m[32m                @PathVariable Long userId[m
[32m+[m[32m        ){[m
[32m+[m[32m            List<PlaylistResponseDto> allPlaylist =[m
[32m+[m[32m                    playlistService.getAllPlaylist(userId);[m
[32m+[m[32m            return ResponseEntity.ok(allPlaylist);[m
[32m+[m[32m        }[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m        @PostMapping("/user/add/songs/to/playlist/{playlistId}")[m
[32m+[m[32m        public ResponseEntity<PlaylistDto> addSongToPlaylist([m
[32m+[m[32m                @PathVariable Long playlistId,[m
[32m+[m[32m                @RequestBody AddSongToPlaylistRequest request) {[m
[32m+[m[41m    [m
[32m+[m[32m            if (!playlistId.equals(request.getPlaylistId())) {[m
[32m+[m[32m                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Playlist ID in URL does not match request body");[m
[32m+[m[32m            }[m
[32m+[m[41m    [m
[32m+[m[32m            PlaylistDto playlist = playlistService.addSongToPlaylist(request);[m
[32m+[m[32m            return ResponseEntity.ok(playlist);[m
[32m+[m[32m        }[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m//        @GetMapping("/user/{userId}/playlist/{playlistId}/songs")[m
[32m+[m[32m//        public ResponseEntity<List<PlaylistSongDto>>getAllSongByPlaylistId(@PathVariable Long playlistId,[m
[32m+[m[32m//                                                                     @PathVariable Long userId) {[m
[32m+[m[32m//            List<PlaylistSongDto> allPlaylistSongs = playlistService.getAllPlaylistSongs(playlistId, userId);[m
[32m+[m[32m//            return new ResponseEntity(allPlaylistSongs,HttpStatus.OK);[m
[32m+[m[32m//        }[m
[32m+[m
[32m+[m[32m        @GetMapping("/user/playlists/{id}")[m
[32m+[m[32m        public PlaylistDto getPlaylistDetails(@PathVariable Long id) {[m
[32m+[m[32m            return playlistService.getPlaylistWithSongs(id);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/controller/SongController.java b/src/main/java/com/nsu/mymusic/controller/SongController.java[m
[1mindex a4555f2..1c071ba 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/controller/SongController.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/controller/SongController.java[m
[36m@@ -12,7 +12,6 @@[m [mimport java.util.List;[m
 [m
 @RestController[m
 @RequestMapping("/api")[m
[31m-//@CrossOrigin("*")[m
 public class SongController {[m
 [m
     @Autowired[m
[36m@@ -60,6 +59,11 @@[m [mpublic class SongController {[m
         return ResponseEntity.ok(songService.getAllSong());[m
     }[m
 [m
[32m+[m[32m    @GetMapping("/all/songs")[m
[32m+[m[32m    public ResponseEntity<List<SongDto>> getAllSong() {[m
[32m+[m[32m        return ResponseEntity.ok(songService.getAllSong());[m
[32m+[m[32m    }[m
[32m+[m
     @GetMapping("/artist/{artistId}/songs")[m
     public ResponseEntity<List<SongDto>> getAllSongByArtistId(@PathVariable Long artistId) {[m
         return ResponseEntity.ok(songService.getAllByArtistId(artistId));[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/AddSongToPlaylistRequest.java b/src/main/java/com/nsu/mymusic/dtos/AddSongToPlaylistRequest.java[m
[1mindex fcd34cc..67ef157 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/AddSongToPlaylistRequest.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/AddSongToPlaylistRequest.java[m
[36m@@ -1,4 +1,10 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
 public class AddSongToPlaylistRequest {[m
[32m+[m[32m    private Long playlistId;[m
[32m+[m[32m    private Long songId;[m
[32m+[m[32m    private Integer position;[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/AlbumDto.java b/src/main/java/com/nsu/mymusic/dtos/AlbumDto.java[m
[1mindex bcd4add..9c24201 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/AlbumDto.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/AlbumDto.java[m
[36m@@ -1,11 +1,8 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[31m-import com.nsu.mymusic.entity.Artist;[m
[32m+[m
 import lombok.Data;[m
 [m
[31m-import javax.persistence.Column;[m
[31m-import javax.persistence.JoinColumn;[m
[31m-import javax.persistence.ManyToOne;[m
 import java.time.LocalDate;[m
 [m
 @Data[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/CreatePlaylistRequest.java b/src/main/java/com/nsu/mymusic/dtos/CreatePlaylistRequest.java[m
[1mindex 021185d..9f741fd 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/CreatePlaylistRequest.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/CreatePlaylistRequest.java[m
[36m@@ -1,4 +1,11 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
 public class CreatePlaylistRequest {[m
[32m+[m[32m    private String title;[m
[32m+[m[32m    private String description;[m
[32m+[m[32m    private boolean isPublic;[m
 }[m
[41m+[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/PlaylistDto.java b/src/main/java/com/nsu/mymusic/dtos/PlaylistDto.java[m
[1mindex 6a966ae..d732cc7 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/PlaylistDto.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/PlaylistDto.java[m
[36m@@ -1,4 +1,20 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Data[m
 public class PlaylistDto {[m
[32m+[m[32m    private Long id;[m
[32m+[m[32m    private String title;[m
[32m+[m[32m    private String description;[m
[32m+[m[32m    private String playlistImgPath;[m
[32m+[m[32m    private Long creatorId;  //userId[m
[32m+[m[32m    private String creatorName;[m
[32m+[m[32m    private boolean isPublic;[m
[32m+[m[32m    private String createdAt;[m
[32m+[m[32m    private String updateAt;[m
[32m+[m[32m    private int songCount;[m
[32m+[m[32m    private List<PlaylistSongDto> songs;[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/PlaylistResponseDto.java b/src/main/java/com/nsu/mymusic/dtos/PlaylistResponseDto.java[m
[1mindex c769ec7..465a3aa 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/PlaylistResponseDto.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/PlaylistResponseDto.java[m
[36m@@ -1,6 +1,11 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[31m-public class CreatePlaylistDto {[m
[31m-    private Long id;[m
[32m+[m[32mimport lombok.Data;[m
 [m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class PlaylistResponseDto {[m
[32m+[m[32m    private Long id;[m
[32m+[m[32m    private String title;[m
[32m+[m[32m    private String description;[m
[32m+[m[32m    private String img;[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/dtos/PlaylistSongDto.java b/src/main/java/com/nsu/mymusic/dtos/PlaylistSongDto.java[m
[1mindex e5f1162..c2b52d4 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/dtos/PlaylistSongDto.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/dtos/PlaylistSongDto.java[m
[36m@@ -1,4 +1,18 @@[m
 package com.nsu.mymusic.dtos;[m
 [m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
 public class PlaylistSongDto {[m
[32m+[m[32m    private Long id;[m
[32m+[m[32m    private Long songId;[m
[32m+[m[32m    private String songTitle;[m
[32m+[m[32m    private String imgPath;[m
[32m+[m[32m    private String filePath;[m
[32m+[m[32m    private String artistName;[m
[32m+[m[32m    private int duration;[m
[32m+[m[32m    private String addedAt;[m
[32m+[m[32m    private int position;[m
[32m+[m[32m    private String playlistName;[m
[32m+[m[32m    private String playlistImg;[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/entity/LikedSong.java b/src/main/java/com/nsu/mymusic/entity/LikedSong.java[m
[1mindex 51a2172..d6b7ffb 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/entity/LikedSong.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/entity/LikedSong.java[m
[36m@@ -10,7 +10,8 @@[m [mimport java.sql.Timestamp;[m
         @UniqueConstraint(columnNames = {"user_id", "song_id"})[m
 })[m
 @Data[m
[31m-public class LikedSong {[m
[32m+[m[32mpublic class[m
[32m+[m[32mLikedSong {[m
 [m
     @Id[m
     @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/entity/Playlist.java b/src/main/java/com/nsu/mymusic/entity/Playlist.java[m
[1mindex 965c1f7..67e5b69 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/entity/Playlist.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/entity/Playlist.java[m
[36m@@ -1,4 +1,65 @@[m
 package com.nsu.mymusic.entity;[m
 [m
[32m+[m[32mimport com.nsu.mymusic.dtos.PlaylistDto;[m
[32m+[m[32mimport com.nsu.mymusic.dtos.PlaylistResponseDto;[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32mimport java.sql.Timestamp;[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Data[m
 public class Playlist {[m
[32m+[m[32m    @Id[m
[32m+[m[32m    @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+[m[32m    private Long id;[m
[32m+[m
[32m+[m[32m    public String title;[m
[32m+[m
[32m+[m[32m    private String description;[m
[32m+[m
[32m+[m[32m    private String playlistImgPath;[m
[32m+[m[32m    @ManyToOne[m
[32m+[m[32m    @JoinColumn(name = "user_id",nullable = false)[m
[32m+[m[32m    private Users creator;[m
[32m+[m
[32m+[m[32m    @Column(name = "is_public")[m
[32m+[m[32m    private boolean isPublic=false;[m
[32m+[m
[32m+[m[32m    @Column(name = "created_at",nullable = false)[m
[32m+[m[32m    private Timestamp createdAt;[m
[32m+[m
[32m+[m[32m    private Timestamp updatedAt;[m
[32m+[m
[32m+[m[32m    @OneToMany(mappedBy = "playlist",cascade = CascadeType.ALL,orphanRemoval = true)[m
[32m+[m[32m    private List<PlaylistSong> songs=new ArrayList<>();[m
[32m+[m
[32m+[m[32m    @PrePersist[m
[32m+[m[32m    public void onCreate(){[m
[32m+[m[32m        createdAt=new Timestamp(System.currentTimeMillis());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public PlaylistResponseDto responseDto() {[m
[32m+[m[32m        PlaylistResponseDto dto = new PlaylistResponseDto();[m
[32m+[m[32m        dto.setId(this.id);[m
[32m+[m[32m        dto.setTitle(this.title);[m
[32m+[m[32m        dto.setDescription(this.description);[m
[32m+[m[32m        dto.setImg(this.playlistImgPath);[m
[32m+[m[32m        return dto;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public PlaylistDto  toDto(){[m
[32m+[m[32m        PlaylistDto dto = new PlaylistDto();[m
[32m+[m[32m        dto.setId(this.id);[m
[32m+[m[32m        dto.setTitle(this.title);[m
[32m+[m[32m        dto.setDescription(this.description);[m
[32m+[m[32m        dto.setPublic(this.isPublic);[m
[32m+[m[32m        dto.setPlaylistImgPath(this.playlistImgPath);[m
[32m+[m[32m        return dto;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/entity/PlaylistSong.java b/src/main/java/com/nsu/mymusic/entity/PlaylistSong.java[m
[1mindex f78d3cf..7427270 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/entity/PlaylistSong.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/entity/PlaylistSong.java[m
[36m@@ -1,4 +1,53 @@[m
 package com.nsu.mymusic.entity;[m
 [m
[31m-public class PlaylistSong {[m
[32m+[m[32mimport com.nsu.mymusic.dtos.PlaylistSongDto;[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32mimport java.sql.Timestamp;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "playlist_songs", uniqueConstraints = {[m
[32m+[m[32m        @UniqueConstraint(columnNames = {"playlist_id", "song_id"})[m
[32m+[m[32m})[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic  class PlaylistSong {[m
[32m+[m
[32m+[m[32m    @Id[m
[32m+[m[32m    @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+[m[32m    private Long id;[m
[32m+[m
[32m+[m[32m    @ManyToOne[m
[32m+[m[32m    @JoinColumn(name = "playlist_id", nullable = false)[m
[32m+[m[32m    private Playlist playlist;[m
[32m+[m
[32m+[m[32m    @ManyToOne[m
[32m+[m[32m    @JoinColumn(name = "song_id", nullable = false)[m
[32m+[m[32m    private Song song;[m
[32m+[m
[32m+[m[32m    @Column(name = "added_at", updatable = false)[m
[32m+[m[32m    private Timestamp addedAt;[m
[32m+[m
[32m+[m[32m    private int position; // For ordering songs in playlist[m
[32m+[m
[32m+[m[32m    @PrePersist[m
[32m+[m[32m    protected void onCreate() {[m
[32m+[m[32m        addedAt = new Timestamp(System.currentTimeMillis());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public PlaylistSongDto toDto() {[m
[32m+[m[32m        PlaylistSongDto dto = new PlaylistSongDto();[m
[32m+[m[32m        dto.setId(this.id);[m
[32m+[m[32m        dto.setSongId(this.song.getId());[m
[32m+[m[32m        dto.setSongTitle(this.song.getTitle());[m
[32m+[m[32m        dto.setImgPath(this.song.getSongImgPath());[m
[32m+[m[32m        dto.setFilePath(this.song.getFilePath());[m
[32m+[m[32m        dto.setAddedAt(addedAt.toString());[m
[32m+[m[32m        dto.setDuration(this.song.getDuration());[m
[32m+[m[32m        dto.setPlaylistImg(playlist.getTitle());[m
[32m+[m[32m        dto.setPlaylistImg(playlist.getPlaylistImgPath());[m
[32m+[m[32m        dto.setPosition(position);[m
[32m+[m[32m        dto.setArtistName(playlist.getCreator().getUsername());[m
[32m+[m[32m        return dto;[m
[32m+[m[32m    }[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/entity/Song.java b/src/main/java/com/nsu/mymusic/entity/Song.java[m
[1mindex b26aa62..39db9ca 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/entity/Song.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/entity/Song.java[m
[36m@@ -56,6 +56,7 @@[m [mpublic class Song {[m
         songDto.setSongId(this.id);[m
         songDto.setTitle(this.title);[m
         songDto.setArtistId(artist.getId());[m
[32m+[m[32m        songDto.setArtistName(artist.getUser().getUsername());[m
         if (album != null) {[m
             songDto.setAlbumId(album.getId());[m
             songDto.setAlbumName(album.getTitle());[m
[36m@@ -64,7 +65,6 @@[m [mpublic class Song {[m
            songDto.setGenreId(genre.getId());[m
            songDto.setGenreName(genre.getTitle());[m
        }[m
[31m-[m
         songDto.setDuration(this.duration);[m
         songDto.setFilePath(this.filePath);[m
         songDto.setSongImgPath(this.songImgPath);[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/repository/PlaylistRepository.java b/src/main/java/com/nsu/mymusic/repository/PlaylistRepository.java[m
[1mindex f3a9125..489529c 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/repository/PlaylistRepository.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/repository/PlaylistRepository.java[m
[36m@@ -1,4 +1,14 @@[m
 package com.nsu.mymusic.repository;[m
 [m
[31m-public interface PlaylistRepository {[m
[32m+[m[32mimport com.nsu.mymusic.entity.Playlist;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.stereotype.Repository;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Repository[m
[32m+[m[32mpublic interface PlaylistRepository extends JpaRepository<Playlist, Long> {[m
[32m+[m
[32m+[m[32m    List<Playlist> findByCreatorId(Long userId);[m
[32m+[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/repository/PlaylistSongRepository.java b/src/main/java/com/nsu/mymusic/repository/PlaylistSongRepository.java[m
[1mindex 5223560..db0c27c 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/repository/PlaylistSongRepository.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/repository/PlaylistSongRepository.java[m
[36m@@ -1,4 +1,17 @@[m
 package com.nsu.mymusic.repository;[m
 [m
[31m-public interface PlaylistSongRepository {[m
[32m+[m[32mimport com.nsu.mymusic.entity.Playlist;[m
[32m+[m[32mimport com.nsu.mymusic.entity.PlaylistSong;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.stereotype.Repository;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.util.Optional;[m
[32m+[m
[32m+[m[32m@Repository[m
[32m+[m[32mpublic interface PlaylistSongRepository extends JpaRepository<PlaylistSong, Long> {[m
[32m+[m[32m    Optional<Playlist>findByPlaylistIdAndSongId(Long playlistId, Long songId);[m
[32m+[m[32m    boolean existsByPlaylistIdAndSongId(Long playlistId, Long songId);[m
[32m+[m
[32m+[m[32m    List<PlaylistSong>findByPlaylistIdAndPlaylist_Creator_Id(Long playlistId,Long creatorId);[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/repository/SongRepository.java b/src/main/java/com/nsu/mymusic/repository/SongRepository.java[m
[1mindex ba87fb4..63cfbff 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/repository/SongRepository.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/repository/SongRepository.java[m
[36m@@ -9,6 +9,7 @@[m [mimport java.util.List;[m
 @Repository[m
 public interface SongRepository extends JpaRepository<Song, Long> {[m
     List<Song>findByArtistStageName(String artistStageName);[m
[31m-    List<Song>findByGenre(String genre);[m
[32m+[m
[32m+[m[32m    List<Song> findByGenreTitle(String genreTitle);[m
     List<Song>findByArtistId(Long artistId);[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/service/artistServices/SongServiceImpl.java b/src/main/java/com/nsu/mymusic/service/artistServices/SongServiceImpl.java[m
[1mindex 709dd6b..16229e2 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/service/artistServices/SongServiceImpl.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/service/artistServices/SongServiceImpl.java[m
[36m@@ -51,14 +51,12 @@[m [mpublic class SongServiceImpl implements SongService {[m
         Genre genre = genreRepository.findById(songDto.getGenreId())[m
                 .orElseThrow(() -> new RuntimeException("Genre not found"));[m
 [m
[31m-[m
         String songPath = fileStorageUtil.saveFile(songFile, "song");[m
         String imgPath=fileStorageUtil.saveFile(imageFile,"image");[m
         Song song = new Song();[m
         song.setTitle(songDto.getTitle());[m
         song.setDuration(songDto.getDuration());[m
         song.setGenre(genre);[m
[31m-[m
         song.setArtist(artist);[m
         song.setAlbum(album);[m
         song.setFilePath(songPath);[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/service/userServices/PlaylistService.java b/src/main/java/com/nsu/mymusic/service/userServices/PlaylistService.java[m
[1mindex 14fbabc..65b0627 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/service/userServices/PlaylistService.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/service/userServices/PlaylistService.java[m
[36m@@ -1,4 +1,16 @@[m
 package com.nsu.mymusic.service.userServices;[m
 [m
[32m+[m[32mimport com.nsu.mymusic.dtos.*;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
 public interface PlaylistService {[m
[32m+[m[32m    public PlaylistDto createPlaylist(CreatePlaylistRequest request, Long userId);[m
[32m+[m[32m    public List<PlaylistResponseDto> getAllPlaylist(Long userId);[m
[32m+[m[32m    public PlaylistDto getPlaylistById(Long id);[m
[32m+[m[32m    public PlaylistDto addSongToPlaylist(AddSongToPlaylistRequest request);[m
[32m+[m
[32m+[m[32m    public PlaylistDto getPlaylistWithSongs(Long playlistId);[m
[32m+[m[32m//    public List<PlaylistSongDto>getAllPlaylistSongs(Long  playlistId,Long userId);[m
[32m+[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/service/userServices/PlaylistServiceImpl.java b/src/main/java/com/nsu/mymusic/service/userServices/PlaylistServiceImpl.java[m
[1mindex 561abb7..cb9e6f1 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/service/userServices/PlaylistServiceImpl.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/service/userServices/PlaylistServiceImpl.java[m
[36m@@ -1,4 +1,136 @@[m
 package com.nsu.mymusic.service.userServices;[m
 [m
[31m-public class PlaylistServiceImpl {[m
[32m+[m[32mimport com.nsu.mymusic.dtos.*;[m
[32m+[m[32mimport com.nsu.mymusic.entity.Playlist;[m
[32m+[m[32mimport com.nsu.mymusic.entity.PlaylistSong;[m
[32m+[m[32mimport com.nsu.mymusic.entity.Song;[m
[32m+[m[32mimport com.nsu.mymusic.entity.Users;[m
[32m+[m[32mimport com.nsu.mymusic.repository.PlaylistRepository;[m
[32m+[m[32mimport com.nsu.mymusic.repository.PlaylistSongRepository;[m
[32m+[m[32mimport com.nsu.mymusic.repository.SongRepository;[m
[32m+[m[32mimport com.nsu.mymusic.repository.UserRepository;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m[32mimport org.springframework.transaction.annotation.Transactional;[m
[32m+[m
[32m+[m[32mimport java.sql.Timestamp;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.util.stream.Collectors;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class PlaylistServiceImpl implements PlaylistService {[m
[32m+[m
[32m+[m[32m   @Autowired[m
[32m+[m[32m   private UserRepository userRepository;[m
[32m+[m
[32m+[m[32m   @Autowired[m
[32m+[m[32m   private PlaylistRepository playlistRepository;[m
[32m+[m
[32m+[m[32m   @Autowired[m
[32m+[m[32m   private PlaylistSongRepository playlistSongRepository;[m
[32m+[m
[32m+[m[32m   @Autowired[m
[32m+[m[32m   private SongRepository songRepository;[m
[32m+[m
[32m+[m[32m   @Transactional[m
[32m+[m[32m    public PlaylistDto createPlaylist(CreatePlaylistRequest request,Long userId) {[m
[32m+[m
[32m+[m[32m        Users user=userRepository.findById(userId)[m
[32m+[m[32m                .orElseThrow(()->new RuntimeException("User not found"));[m
[32m+[m
[32m+[m[32m        Playlist playlist=new Playlist();[m
[32m+[m[32m        playlist.setTitle(request.getTitle());[m
[32m+[m[32m        playlist.setDescription(request.getDescription());[m
[32m+[m[32m        playlist.setPublic(request.isPublic());[m
[32m+[m[32m        playlist.setCreator(user);[m
[32m+[m[32m        Playlist save = playlistRepository.save(playlist);[m
[32m+[m[32m        return save.toDto();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public List<PlaylistResponseDto> getAllPlaylist(Long userId) {[m
[32m+[m[32m        List<Playlist> playlist = playlistRepository.findByCreatorId(userId);[m
[32m+[m[32m        return playlist[m
[32m+[m[32m                .stream()[m
[32m+[m[32m                .map(Playlist::responseDto)[m
[32m+[m[32m                .collect(Collectors.toList());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public PlaylistDto getPlaylistById(Long id) {[m
[32m+[m[32m        Playlist playlist = playlistRepository.findById(id)[m
[32m+[m[32m                .orElseThrow(() -> new RuntimeException("Playlist not found"));[m
[32m+[m[32m        return playlist.toDto();[m
[32m+[m[32m    }[m
[32m+[m[32m    public PlaylistDto addSongToPlaylist(AddSongToPlaylistRequest request) {[m
[32m+[m[32m       Playlist playlist= playlistRepository.findById(request.getPlaylistId())[m
[32m+[m[32m               .orElseThrow(()->new RuntimeException("Playlist not found"));[m
[32m+[m
[32m+[m[32m       Song song=songRepository.findById(request.getSongId())[m
[32m+[m[32m               .orElseThrow(()->new RuntimeException("Song not found"));[m
[32m+[m
[32m+[m[32m//       playlistSongRepository[m
[32m+[m[32m//               .findByPlaylistIdAndSongId(request.getPlaylistId(), request.getSongId())[m
[32m+[m[32m//               .ifPresent(playlistSong->{[m
[32m+[m[32m//                   throw new RuntimeException("Song already Present");[m
[32m+[m[32m//               });[m
[32m+[m[32m        boolean songAlreadyExists = playlistSongRepository.existsByPlaylistIdAndSongId(playlist.getId(), song.getId());[m
[32m+[m[32m        if (songAlreadyExists) {[m
[32m+[m[32m            throw new IllegalStateException("Song already exists");[m
[32m+[m[32m        }[m
[32m+[m[32m        PlaylistSong playlistSong=new PlaylistSong();[m
[32m+[m[32m       playlistSong.setPlaylist(playlist);[m
[32m+[m[32m       playlistSong.setSong(song);[m
[32m+[m[32m       //set position -if not provied, append to end[m
[32m+[m[32m        int position=request.getPosition()!=null?[m
[32m+[m[32m                request.getPosition():[m
[32m+[m[32m                playlist.getSongs().size()+1;[m
[32m+[m[32m        playlistSong.setPosition(position);[m
[32m+[m
[32m+[m[32m        PlaylistSong saved = playlistSongRepository.save(playlistSong);[m
[32m+[m
[32m+[m[32m        //[m
[32m+[m[32m        playlist.setUpdatedAt(new Timestamp(System.currentTimeMillis()));[m
[32m+[m[32m//        playlistRepository.save(playlist);[m
[32m+[m[32m//        return getPlaylistById(playlist.getId());[m
[32m+[m[32m        return playlist.toDto();[m
[32m+[m[32m   }[m
[32m+[m
[32m+[m[32m    public PlaylistDto getPlaylistWithSongs(Long playlistId) {[m
[32m+[m[32m        Playlist playlist = playlistRepository.findById(playlistId)[m
[32m+[m[32m                .orElseThrow(() -> new RuntimeException("Playlist not found"));[m
[32m+[m
[32m+[m[32m        PlaylistDto dto = new PlaylistDto();[m
[32m+[m[32m        dto.setId(playlist.getId());[m
[32m+[m[32m        dto.setTitle(playlist.getTitle());[m
[32m+[m[32m        dto.setPlaylistImgPath(playlist.getPlaylistImgPath());[m
[32m+[m[32m        dto.setDescription(playlist.getDescription());[m
[32m+[m[32m        dto.setPublic(playlist.isPublic());[m
[32m+[m
[32m+[m[32m        List<PlaylistSongDto> songDtos = playlist.getSongs().stream().map(song -> {[m
[32m+[m[32m            PlaylistSongDto s = new PlaylistSongDto();[m
[32m+[m[32m            s.setId(song.getId());[m
[32m+[m[32m            s.setSongId(song.getSong().getId());[m
[32m+[m[32m            s.setSongTitle(song.getSong().getTitle());[m
[32m+[m[32m            s.setImgPath(song.getSong().getSongImgPath());[m
[32m+[m[32m            s.setFilePath(song.getSong().getFilePath());[m
[32m+[m[32m            s.setDuration(song.getSong().getDuration());[m
[32m+[m[32m            s.setArtistName(song.getSong().getArtist().getUser().getUsername());[m
[32m+[m[32m            s.setAddedAt(song.getAddedAt().toString());[m
[32m+[m[32m            s.setPosition(song.getPosition());[m
[32m+[m[32m            return s;[m
[32m+[m[32m        }).toList();[m
[32m+[m
[32m+[m[32m        dto.setSongs(songDtos);[m
[32m+[m[32m        return dto;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m//   public List<PlaylistSongDto>getAllPlaylistSongs(Long  playlistId,Long userId) {[m
[32m+[m[32m//[m
[32m+[m[32m//       List<PlaylistSong> byPlaylistIdAndPlaylistCreatorId = playlistSongRepository.findByPlaylistIdAndPlaylist_Creator_Id(playlistId, userId);[m
[32m+[m[32m//       return byPlaylistIdAndPlaylistCreatorId[m
[32m+[m[32m//               .stream()[m
[32m+[m[32m//               .map(PlaylistSong::toDto)[m
[32m+[m[32m//               .collect(Collectors.toList());[m
[32m+[m[32m//   }[m
 }[m
[1mdiff --git a/src/main/java/com/nsu/mymusic/service/userServices/UserServiceImpl.java b/src/main/java/com/nsu/mymusic/service/userServices/UserServiceImpl.java[m
[1mindex bbbb130..0c279b5 100644[m
[1m--- a/src/main/java/com/nsu/mymusic/service/userServices/UserServiceImpl.java[m
[1m+++ b/src/main/java/com/nsu/mymusic/service/userServices/UserServiceImpl.java[m
[36m@@ -36,7 +36,6 @@[m [mpublic class UserServiceImpl implements UserService {[m
 [m
     @PostConstruct[m
     public void addUser() {[m
[31m-[m
         //check if role exist or not if not create[m
         Role role = roleRepository.findByRoleName("ROLE_USER")[m
                 .orElseGet(() -> {[m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex d385d00..8b65775 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -7,7 +7,7 @@[m [mspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
 # Hibernate Configuration[m
 spring.jpa.hibernate.ddl-auto=update[m
 spring.jpa.show-sql=true[m
[31m-spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect[m
[32m+[m[32mspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect[m
 logging.level.org.springframework.security=DEBUG[m
 [m
 spring.servlet.multipart.max-file-size=10MB[m
